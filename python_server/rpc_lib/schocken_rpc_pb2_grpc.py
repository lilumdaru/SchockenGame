# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

from rpc_lib import schocken_rpc_pb2 as rpc__lib_dot_schocken__rpc__pb2


class SchockenConnectorStub(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.helloworld";
    option java_outer_classname = "SchockenProto";
    option objc_class_prefix = "HLW";

    package Schocken;

    """

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.registerPlayer = channel.unary_unary(
                '/SchockenConnector/registerPlayer',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.RegistrationResponse.FromString,
                )
        self.getPlayerList = channel.unary_unary(
                '/SchockenConnector/getPlayerList',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.GameID.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.PlayerList.FromString,
                )
        self.registerGame = channel.unary_unary(
                '/SchockenConnector/registerGame',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.GameID.FromString,
                )
        self.startGame = channel.unary_unary(
                '/SchockenConnector/startGame',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.GameID.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.StartGameResponse.FromString,
                )
        self.touchDice = channel.unary_unary(
                '/SchockenConnector/touchDice',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.DiceTouched.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
                )
        self.touchCup = channel.unary_unary(
                '/SchockenConnector/touchCup',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
                )
        self.turnSix = channel.unary_unary(
                '/SchockenConnector/turnSix',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
                )
        self.endTurn = channel.unary_unary(
                '/SchockenConnector/endTurn',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
                )
        self.refreshGame = channel.unary_unary(
                '/SchockenConnector/refreshGame',
                request_serializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
                response_deserializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
                )


class SchockenConnectorServicer(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.helloworld";
    option java_outer_classname = "SchockenProto";
    option objc_class_prefix = "HLW";

    package Schocken;

    """

    def registerPlayer(self, request, context):
        """Lobby RPCs
        Services called from Lobby:
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def getPlayerList(self, request, context):
        """
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def registerGame(self, request, context):
        """Host opening a new Game
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def startGame(self, request, context):
        """host action to Start the Game
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def touchDice(self, request, context):
        """Game RPCs
        """
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def touchCup(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def turnSix(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def endTurn(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def refreshGame(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_SchockenConnectorServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'registerPlayer': grpc.unary_unary_rpc_method_handler(
                    servicer.registerPlayer,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.RegistrationResponse.SerializeToString,
            ),
            'getPlayerList': grpc.unary_unary_rpc_method_handler(
                    servicer.getPlayerList,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.GameID.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.PlayerList.SerializeToString,
            ),
            'registerGame': grpc.unary_unary_rpc_method_handler(
                    servicer.registerGame,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.GameID.SerializeToString,
            ),
            'startGame': grpc.unary_unary_rpc_method_handler(
                    servicer.startGame,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.GameID.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.StartGameResponse.SerializeToString,
            ),
            'touchDice': grpc.unary_unary_rpc_method_handler(
                    servicer.touchDice,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.DiceTouched.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.SerializeToString,
            ),
            'touchCup': grpc.unary_unary_rpc_method_handler(
                    servicer.touchCup,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.SerializeToString,
            ),
            'turnSix': grpc.unary_unary_rpc_method_handler(
                    servicer.turnSix,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.SerializeToString,
            ),
            'endTurn': grpc.unary_unary_rpc_method_handler(
                    servicer.endTurn,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.SerializeToString,
            ),
            'refreshGame': grpc.unary_unary_rpc_method_handler(
                    servicer.refreshGame,
                    request_deserializer=rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.FromString,
                    response_serializer=rpc__lib_dot_schocken__rpc__pb2.RpcGameData.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'SchockenConnector', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class SchockenConnector(object):
    """option java_multiple_files = true;
    option java_package = "io.grpc.examples.helloworld";
    option java_outer_classname = "SchockenProto";
    option objc_class_prefix = "HLW";

    package Schocken;

    """

    @staticmethod
    def registerPlayer(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/registerPlayer',
            rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.RegistrationResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def getPlayerList(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/getPlayerList',
            rpc__lib_dot_schocken__rpc__pb2.GameID.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.PlayerList.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def registerGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/registerGame',
            rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.GameID.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def startGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/startGame',
            rpc__lib_dot_schocken__rpc__pb2.GameID.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.StartGameResponse.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def touchDice(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/touchDice',
            rpc__lib_dot_schocken__rpc__pb2.DiceTouched.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def touchCup(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/touchCup',
            rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def turnSix(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/turnSix',
            rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def endTurn(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/endTurn',
            rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def refreshGame(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/SchockenConnector/refreshGame',
            rpc__lib_dot_schocken__rpc__pb2.PlayerInfo.SerializeToString,
            rpc__lib_dot_schocken__rpc__pb2.RpcGameData.FromString,
            options, channel_credentials,
            call_credentials, compression, wait_for_ready, timeout, metadata)
